!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=49)}([function(e,t){e.exports=require("util")},function(e,t){e.exports=require("stream")},function(e,t,r){"use strict";e.exports.EOL="\n",e.exports.SUPPRESS="==SUPPRESS==",e.exports.OPTIONAL="?",e.exports.ZERO_OR_MORE="*",e.exports.ONE_OR_MORE="+",e.exports.PARSER="A...",e.exports.REMAINDER="...",e.exports._UNRECOGNIZED_ARGS_ATTR="_unrecognized_args"},function(e,t,r){"use strict";var n=r(2),o=e.exports=function(e){if(e=e||{},this.optionStrings=e.optionStrings||[],this.dest=e.dest,this.nargs=void 0!==e.nargs?e.nargs:null,this.constant=void 0!==e.constant?e.constant:null,this.defaultValue=e.defaultValue,this.type=void 0!==e.type?e.type:null,this.choices=void 0!==e.choices?e.choices:null,this.required=void 0!==e.required&&e.required,this.help=void 0!==e.help?e.help:null,this.metavar=void 0!==e.metavar?e.metavar:null,!(this.optionStrings instanceof Array))throw new Error("optionStrings should be an array");if(void 0!==this.required&&"boolean"!=typeof this.required)throw new Error("required should be a boolean")};o.prototype.getName=function(){return this.optionStrings.length>0?this.optionStrings.join("/"):null!==this.metavar&&this.metavar!==n.SUPPRESS?this.metavar:void 0!==this.dest&&this.dest!==n.SUPPRESS?this.dest:null},o.prototype.isOptional=function(){return!this.isPositional()},o.prototype.isPositional=function(){return 0===this.optionStrings.length},o.prototype.call=function(){throw new Error(".call() not defined")}},function(e,t){e.exports=require("zlib")},function(e,t){e.exports=require("fs")},function(e,t){t.getArg=function(e,t,r){if(t in e)return e[t];if(3===arguments.length)return r;throw new Error('"'+t+'" is a required argument.')};var r=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,n=/^data:.+\,.+$/;function o(e){var t=e.match(r);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function i(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function s(e){var r=e,n=o(e);if(n){if(!n.path)return e;r=n.path}for(var s,a=t.isAbsolute(r),u=r.split(/\/+/),l=0,c=u.length-1;c>=0;c--)"."===(s=u[c])?u.splice(c,1):".."===s?l++:l>0&&(""===s?(u.splice(c+1,l),l=0):(u.splice(c,2),l--));return""===(r=u.join("/"))&&(r=a?"/":"."),n?(n.path=r,i(n)):r}function a(e,t){""===e&&(e="."),""===t&&(t=".");var r=o(t),a=o(e);if(a&&(e=a.path||"/"),r&&!r.scheme)return a&&(r.scheme=a.scheme),i(r);if(r||t.match(n))return t;if(a&&!a.host&&!a.path)return a.host=t,i(a);var u="/"===t.charAt(0)?t:s(e.replace(/\/+$/,"")+"/"+t);return a?(a.path=u,i(a)):u}t.urlParse=o,t.urlGenerate=i,t.normalize=s,t.join=a,t.isAbsolute=function(e){return"/"===e.charAt(0)||r.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var r=0;0!==t.indexOf(e+"/");){var n=e.lastIndexOf("/");if(n<0)return t;if((e=e.slice(0,n)).match(/^([^\/]+:\/)?\/*$/))return t;++r}return Array(r+1).join("../")+t.substr(e.length+1)};var u=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var r=t-10;r>=0;r--)if(36!==e.charCodeAt(r))return!1;return!0}function p(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=u?l:function(e){return c(e)?"$"+e:e},t.fromSetString=u?l:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,r){var n=p(e.source,t.source);return 0!==n||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)||r||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=e.generatedLine-t.generatedLine)?n:p(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,r){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||r||0!==(n=p(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:p(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=p(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:p(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,r){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),r){var n=o(r);if(!n)throw new Error("sourceMapURL could not be parsed");if(n.path){var u=n.path.lastIndexOf("/");u>=0&&(n.path=n.path.substring(0,u+1))}t=a(i(n),t)}return s(t)}},function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.repeat=function(e,t){for(var r="",n=0;n<t;n++)r+=e;return r},t.arrayEqual=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0},t.trimChars=function(e,t){for(var r=0,n=e.length-1;t.indexOf(e.charAt(r))>=0;)r++;for(;t.indexOf(e.charAt(n))>=0;)n--;return e.slice(r,n+1)},t.capitalize=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},t.arrayUnion=function(){for(var e=[],t=0,r={};t<arguments.length;t++)for(var n=arguments[t],o=0;o<n.length;o++)r[n[o]]||(r[n[o]]=!0,e.push(n[o]));return e},t.has=n,t.extend=function(e,t){for(var r in t)n(t,r)&&(e[r]=t[r])},t.trimEnd=function(e){return e.replace(/\s+$/g,"")}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("url")},function(e,t,r){"use strict";var n=r(0),o=r(3),i=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for storeAction");o.call(this,e)};n.inherits(i,o),i.prototype.call=function(e,t){t.set(this.dest,this.constant)}},function(e,t,r){"use strict";var n=r(0).format;e.exports=function(e,t){var r,o,i=null;return r=(i=e.getName?e.getName():""+e)?n('argument "%s": %s',i,t):t,(o=new TypeError(r)).code="ARGError",o}},function(e,t,r){"use strict";var n=r(19).sprintf,o=r(2),i=r(7);function s(e,t){this._parent=e,this._heading=t,this._items=[]}s.prototype.addItem=function(e){this._items.push(e)},s.prototype.formatHelp=function(e){var t,r;if(this._parent&&e._indent(),t=this._items.map((function(t){var r,n,o;return r=e,n=t[0],o=t[1],n.apply(r,o)})),t=e._joinParts(t),this._parent&&e._dedent(),!t)return"";if(r="",this._heading&&this._heading!==o.SUPPRESS){var n=e.currentIndent;r=i.repeat(" ",n)+this._heading+":"+o.EOL}return e._joinParts([o.EOL,r,t,o.EOL])};var a=e.exports=function(e){e=e||{},this._prog=e.prog,this._maxHelpPosition=e.maxHelpPosition||24,this._width=e.width||(process.env.COLUMNS||80)-2,this._currentIndent=0,this._indentIncriment=e.indentIncriment||2,this._level=0,this._actionMaxLength=0,this._rootSection=new s(null),this._currentSection=this._rootSection,this._whitespaceMatcher=new RegExp("\\s+","g"),this._longBreakMatcher=new RegExp(o.EOL+o.EOL+o.EOL+"+","g")};a.prototype._indent=function(){this._currentIndent+=this._indentIncriment,this._level+=1},a.prototype._dedent=function(){if(this._currentIndent-=this._indentIncriment,this._level-=1,this._currentIndent<0)throw new Error("Indent decreased below 0.")},a.prototype._addItem=function(e,t){this._currentSection.addItem([e,t])},a.prototype.startSection=function(e){this._indent();var t=new s(this._currentSection,e),r=t.formatHelp.bind(t);this._addItem(r,[this]),this._currentSection=t},a.prototype.endSection=function(){this._currentSection=this._currentSection._parent,this._dedent()},a.prototype.addText=function(e){e&&e!==o.SUPPRESS&&this._addItem(this._formatText,[e])},a.prototype.addUsage=function(e,t,r,n){e!==o.SUPPRESS&&this._addItem(this._formatUsage,[e,t,r,n])},a.prototype.addArgument=function(e){if(e.help!==o.SUPPRESS){var t,r=this,n=[this._formatActionInvocation(e)],i=n[0].length;e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){var t=r._formatActionInvocation(e);n.push(t),i=Math.max(i,t.length)})),this._dedent()),t=i+this._currentIndent,this._actionMaxLength=Math.max(this._actionMaxLength,t),this._addItem(this._formatAction,[e])}},a.prototype.addArguments=function(e){var t=this;e.forEach((function(e){t.addArgument(e)}))},a.prototype.formatHelp=function(){var e=this._rootSection.formatHelp(this);return e&&(e=e.replace(this._longBreakMatcher,o.EOL+o.EOL),e=i.trimChars(e,o.EOL)+o.EOL),e},a.prototype._joinParts=function(e){return e.filter((function(e){return e&&e!==o.SUPPRESS})).join("")},a.prototype._formatUsage=function(e,t,r,s){if(s||"string"==typeof s||(s="usage: "),t=t||[],r=r||[],e)e=n(e,{prog:this._prog});else if(e||0!==t.length){if(!e){var a,u=this._prog,l=[],c=[];if(t.forEach((function(e){e.isOptional()?l.push(e):c.push(e)})),e=[u,this._formatActionsUsage([].concat(l,c),r)].join(" "),a=this._width-this._currentIndent,s.length+e.length>a){var p=new RegExp("\\(.*?\\)+|\\[.*?\\]+|\\S+","g"),h=this._formatActionsUsage(l,r),f=this._formatActionsUsage(c,r),g=h.match(p),d=f.match(p)||[];if(g.join(" ")!==h)throw new Error("assert \"optionalParts.join(' ') === optionalUsage\"");if(d.join(" ")!==f)throw new Error("assert \"positionalParts.join(' ') === positionalUsage\"");var m,y,_=function(e,t,r){var n=[],o=[],i=r?r.length-1:t.length-1;return e.forEach((function(e){i+1+e.length>a&&(n.push(t+o.join(" ")),o=[],i=t.length-1),o.push(e),i+=e.length+1})),o&&n.push(t+o.join(" ")),r&&(n[0]=n[0].substr(t.length)),n};s.length+u.length<=.75*a?(y=i.repeat(" ",s.length+u.length+1),m=g?[].concat(_([u].concat(g),y,s),_(d,y)):d?_([u].concat(d),y,s):[u]):(y=i.repeat(" ",s.length),(m=_(g.concat(d),y)).length>1&&(m=[].concat(_(g,y),_(d,y))),m=[u].concat(m)),e=m.join(o.EOL)}}}else e=this._prog;return s+e+o.EOL+o.EOL},a.prototype._formatActionsUsage=function(e,t){var r=[],n=[],s=this;t.forEach((function(t){var o,s,a=e.indexOf(t._groupActions[0]);if(a>=0&&(o=a+t._groupActions.length,i.arrayEqual(e.slice(a,o),t._groupActions)))for(t._groupActions.forEach((function(e){r.push(e)})),t.required?(n[a]?n[a]+=" (":n[a]="(",n[o]=")"):(n[a]?n[a]+=" [":n[a]="[",n[o]="]"),s=a+1;s<o;s+=1)n[s]="|"}));var a=[];e.forEach((function(e,t){var i,u,l;e.help===o.SUPPRESS?(a.push(null),"|"===n[t]?n.splice(t,t):"|"===n[t+1]&&n.splice(t+1,t+1)):e.isOptional()?(u=e.optionStrings[0],0===e.nargs?i=""+u:(l=e.dest.toUpperCase(),i=u+" "+s._formatArgs(e,l)),!e.required&&r.indexOf(e)<0&&(i="["+i+"]"),a.push(i)):(i=s._formatArgs(e,e.dest),r.indexOf(e)>=0&&"["===i[0]&&"]"===i[i.length-1]&&(i=i.slice(1,-1)),a.push(i))}));for(var u=n.length-1;u>=0;--u)null!==n[u]&&a.splice(u,0,n[u]);var l=a.filter((function(e){return!!e})).join(" ");return l=(l=(l=(l=(l=(l=l.replace(/([\[(]) /g,"$1")).replace(/ ([\])])/g,"$1")).replace(/\[ *\]/g,"")).replace(/\( *\)/g,"")).replace(/\(([^|]*)\)/g,"$1")).trim()},a.prototype._formatText=function(e){e=n(e,{prog:this._prog});var t=this._width-this._currentIndent,r=i.repeat(" ",this._currentIndent);return this._fillText(e,t,r)+o.EOL+o.EOL},a.prototype._formatAction=function(e){var t,r,n,s,a=this,u=Math.min(this._actionMaxLength+2,this._maxHelpPosition),l=this._width-u,c=u-this._currentIndent-2,p=this._formatActionInvocation(e);return e.help?p.length<=c?(p=i.repeat(" ",this._currentIndent)+p+"  "+i.repeat(" ",c-p.length),s=0):(p=i.repeat(" ",this._currentIndent)+p+o.EOL,s=u):p=i.repeat(" ",this._currentIndent)+p+o.EOL,n=[p],e.help?(t=this._expandHelp(e),r=this._splitLines(t,l),n.push(i.repeat(" ",s)+r[0]+o.EOL),r.slice(1).forEach((function(e){n.push(i.repeat(" ",u)+e+o.EOL)}))):p.charAt(p.length-1)!==o.EOL&&n.push(o.EOL),e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){n.push(a._formatAction(e))})),this._dedent()),this._joinParts(n)},a.prototype._formatActionInvocation=function(e){if(!e.isOptional())return this._metavarFormatter(e,e.dest)(1)[0];var t,r,n=[];return 0===e.nargs?n=n.concat(e.optionStrings):(t=e.dest.toUpperCase(),r=this._formatArgs(e,t),e.optionStrings.forEach((function(e){n.push(e+" "+r)}))),n.join(", ")},a.prototype._metavarFormatter=function(e,t){var r;if(e.metavar||""===e.metavar)r=e.metavar;else if(e.choices){var n=e.choices;n="string"==typeof n?n.split("").join(", "):Array.isArray(n)?n.join(","):Object.keys(n).join(","),r="{"+n+"}"}else r=t;return function(e){if(Array.isArray(r))return r;for(var t=[],n=0;n<e;n+=1)t.push(r);return t}},a.prototype._formatArgs=function(e,t){var r,n,i=this._metavarFormatter(e,t);switch(e.nargs){case void 0:case null:r=""+(n=i(1))[0];break;case o.OPTIONAL:r="["+(n=i(1))[0]+"]";break;case o.ZERO_OR_MORE:r="["+(n=i(2))[0]+" ["+n[1]+" ...]]";break;case o.ONE_OR_MORE:r=(n=i(2))[0]+" ["+n[1]+" ...]";break;case o.REMAINDER:r="...";break;case o.PARSER:r=(n=i(1))[0]+" ...";break;default:r=(n=i(e.nargs)).join(" ")}return r},a.prototype._expandHelp=function(e){var t={prog:this._prog};return Object.keys(e).forEach((function(r){var n=e[r];n!==o.SUPPRESS&&(t[r]=n)})),t.choices&&("string"==typeof t.choices?t.choices=t.choices.split("").join(", "):Array.isArray(t.choices)?t.choices=t.choices.join(", "):t.choices=Object.keys(t.choices).join(", ")),n(this._getHelpString(e),t)},a.prototype._splitLines=function(e,t){var r=[],n=[" ",".",",","!","?"],i=new RegExp("["+n.join("")+"][^"+n.join("")+"]*$");return(e=(e=(e=e.replace(/[\n\|\t]/g," ")).trim()).replace(this._whitespaceMatcher," ")).split(o.EOL).forEach((function(e){if(t>=e.length)r.push(e);else{for(var o=0,s=t;s<=e.length;)s!==e.length&&n.indexOf(e[s]<-1)&&(s=o+(i.exec(e.substring(o,s))||{}).index+1),r.push(e.substring(o,s)),o=s,s+=t;o<e.length&&r.push(e.substring(o,s))}})),r},a.prototype._fillText=function(e,t,r){var n=this._splitLines(e,t);return(n=n.map((function(e){return r+e}))).join(o.EOL)},a.prototype._getHelpString=function(e){return e.help}},function(e,t,r){"use strict";var n=r(0),o=r(2),i=r(7),s=r(12);function a(e){s.call(this,e)}function u(e){s.call(this,e)}function l(e){u.call(this,e)}n.inherits(a,s),a.prototype._getHelpString=function(e){var t=e.help;if(-1===e.help.indexOf("%(defaultValue)s")&&e.defaultValue!==o.SUPPRESS){var r=[o.OPTIONAL,o.ZERO_OR_MORE];(e.isOptional()||r.indexOf(e.nargs)>=0)&&(t+=" (default: %(defaultValue)s)")}return t},e.exports.ArgumentDefaultsHelpFormatter=a,n.inherits(u,s),u.prototype._fillText=function(e,t,r){var n=e.split("\n");return(n=n.map((function(e){return i.trimEnd(r+e)}))).join("\n")},e.exports.RawDescriptionHelpFormatter=u,n.inherits(l,u),l.prototype._splitLines=function(e){return e.split("\n")},e.exports.RawTextHelpFormatter=l},function(e,t){e.exports=require("http")},function(e){e.exports=JSON.parse('{"name":"mediafire-dl","version":"0.1.0","main":"dist/index.js","bin":"dist/index.js","repository":{"type":"git","url":"https://github.com/elcr/mediafire-dl.git"},"author":"elcr","license":"MIT","devDependencies":{"@types/argparse":"^1.0.38","@types/node-fetch":"^2.5.7","argparse":"^1.0.10","node-fetch":"^2.6.0","pkg":"^4.4.8","source-map-loader":"^1.0.0","source-map-support":"^0.5.19","ts-loader":"^7.0.5","typescript":"^3.9.3","webpack":"^4.43.0","webpack-cli":"^3.3.11"},"dependencies":{},"scripts":{"build":"webpack","build-binaries":"pkg --out-path ./bin ."}}')},function(e,t,r){var n=r(17),o=r(6),i=r(18).ArraySet,s=r(31).MappingList;function a(e){e||(e={}),this._file=o.getArg(e,"file",null),this._sourceRoot=o.getArg(e,"sourceRoot",null),this._skipValidation=o.getArg(e,"skipValidation",!1),this._sources=new i,this._names=new i,this._mappings=new s,this._sourcesContents=null}a.prototype._version=3,a.fromSourceMap=function(e){var t=e.sourceRoot,r=new a({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var n={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(n.source=e.source,null!=t&&(n.source=o.relative(t,n.source)),n.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(n.name=e.name)),r.addMapping(n)})),e.sources.forEach((function(n){var i=n;null!==t&&(i=o.relative(t,n)),r._sources.has(i)||r._sources.add(i);var s=e.sourceContentFor(n);null!=s&&r.setSourceContent(n,s)})),r},a.prototype.addMapping=function(e){var t=o.getArg(e,"generated"),r=o.getArg(e,"original",null),n=o.getArg(e,"source",null),i=o.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,r,n,i),null!=n&&(n=String(n),this._sources.has(n)||this._sources.add(n)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=r&&r.line,originalColumn:null!=r&&r.column,source:n,name:i})},a.prototype.setSourceContent=function(e,t){var r=e;null!=this._sourceRoot&&(r=o.relative(this._sourceRoot,r)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[o.toSetString(r)]=t):this._sourcesContents&&(delete this._sourcesContents[o.toSetString(r)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},a.prototype.applySourceMap=function(e,t,r){var n=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');n=e.file}var s=this._sourceRoot;null!=s&&(n=o.relative(s,n));var a=new i,u=new i;this._mappings.unsortedForEach((function(t){if(t.source===n&&null!=t.originalLine){var i=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=i.source&&(t.source=i.source,null!=r&&(t.source=o.join(r,t.source)),null!=s&&(t.source=o.relative(s,t.source)),t.originalLine=i.line,t.originalColumn=i.column,null!=i.name&&(t.name=i.name))}var l=t.source;null==l||a.has(l)||a.add(l);var c=t.name;null==c||u.has(c)||u.add(c)}),this),this._sources=a,this._names=u,e.sources.forEach((function(t){var n=e.sourceContentFor(t);null!=n&&(null!=r&&(t=o.join(r,t)),null!=s&&(t=o.relative(s,t)),this.setSourceContent(t,n))}),this)},a.prototype._validateMapping=function(e,t,r,n){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||r||n)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&r))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:r,original:t,name:n}))},a.prototype._serializeMappings=function(){for(var e,t,r,i,s=0,a=1,u=0,l=0,c=0,p=0,h="",f=this._mappings.toArray(),g=0,d=f.length;g<d;g++){if(e="",(t=f[g]).generatedLine!==a)for(s=0;t.generatedLine!==a;)e+=";",a++;else if(g>0){if(!o.compareByGeneratedPositionsInflated(t,f[g-1]))continue;e+=","}e+=n.encode(t.generatedColumn-s),s=t.generatedColumn,null!=t.source&&(i=this._sources.indexOf(t.source),e+=n.encode(i-p),p=i,e+=n.encode(t.originalLine-1-l),l=t.originalLine-1,e+=n.encode(t.originalColumn-u),u=t.originalColumn,null!=t.name&&(r=this._names.indexOf(t.name),e+=n.encode(r-c),c=r)),h+=e}return h},a.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=o.relative(t,e));var r=o.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,r)?this._sourcesContents[r]:null}),this)},a.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},a.prototype.toString=function(){return JSON.stringify(this.toJSON())},t.SourceMapGenerator=a},function(e,t,r){var n=r(30);t.encode=function(e){var t,r="",o=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&o,(o>>>=5)>0&&(t|=32),r+=n.encode(t)}while(o>0);return r},t.decode=function(e,t,r){var o,i,s,a,u=e.length,l=0,c=0;do{if(t>=u)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(i=n.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));o=!!(32&i),l+=(i&=31)<<c,c+=5}while(o);r.value=(a=(s=l)>>1,1==(1&s)?-a:a),r.rest=t}},function(e,t,r){var n=r(6),o=Object.prototype.hasOwnProperty,i="undefined"!=typeof Map;function s(){this._array=[],this._set=i?new Map:Object.create(null)}s.fromArray=function(e,t){for(var r=new s,n=0,o=e.length;n<o;n++)r.add(e[n],t);return r},s.prototype.size=function(){return i?this._set.size:Object.getOwnPropertyNames(this._set).length},s.prototype.add=function(e,t){var r=i?e:n.toSetString(e),s=i?this.has(e):o.call(this._set,r),a=this._array.length;s&&!t||this._array.push(e),s||(i?this._set.set(e,a):this._set[r]=a)},s.prototype.has=function(e){if(i)return this._set.has(e);var t=n.toSetString(e);return o.call(this._set,t)},s.prototype.indexOf=function(e){if(i){var t=this._set.get(e);if(t>=0)return t}else{var r=n.toSetString(e);if(o.call(this._set,r))return this._set[r]}throw new Error('"'+e+'" is not in the set.')},s.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},s.prototype.toArray=function(){return this._array.slice()},t.ArraySet=s},function(e,t,r){!function(e){var r={not_string:/[^s]/,number:/[diefg]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[\+\-]/};function n(){var e=arguments[0],t=n.cache;return t[e]&&t.hasOwnProperty(e)||(t[e]=n.parse(e)),n.format.call(null,t[e],arguments)}n.format=function(e,t){var i,s,a,u,l,c,p,h,f=1,g=e.length,d="",m=[],y=!0,_="";for(s=0;s<g;s++)if("string"===(d=o(e[s])))m[m.length]=e[s];else if("array"===d){if((u=e[s])[2])for(i=t[f],a=0;a<u[2].length;a++){if(!i.hasOwnProperty(u[2][a]))throw new Error(n("[sprintf] property '%s' does not exist",u[2][a]));i=i[u[2][a]]}else i=u[1]?t[u[1]]:t[f++];if("function"==o(i)&&(i=i()),r.not_string.test(u[8])&&r.not_json.test(u[8])&&"number"!=o(i)&&isNaN(i))throw new TypeError(n("[sprintf] expecting number but found %s",o(i)));switch(r.number.test(u[8])&&(y=i>=0),u[8]){case"b":i=i.toString(2);break;case"c":i=String.fromCharCode(i);break;case"d":case"i":i=parseInt(i,10);break;case"j":i=JSON.stringify(i,null,u[6]?parseInt(u[6]):0);break;case"e":i=u[7]?i.toExponential(u[7]):i.toExponential();break;case"f":i=u[7]?parseFloat(i).toFixed(u[7]):parseFloat(i);break;case"g":i=u[7]?parseFloat(i).toPrecision(u[7]):parseFloat(i);break;case"o":i=i.toString(8);break;case"s":i=(i=String(i))&&u[7]?i.substring(0,u[7]):i;break;case"u":i>>>=0;break;case"x":i=i.toString(16);break;case"X":i=i.toString(16).toUpperCase()}r.json.test(u[8])?m[m.length]=i:(!r.number.test(u[8])||y&&!u[3]?_="":(_=y?"+":"-",i=i.toString().replace(r.sign,"")),c=u[4]?"0"===u[4]?"0":u[4].charAt(1):" ",p=u[6]-(_+i).length,l=u[6]&&p>0?(h=c,Array(p+1).join(h)):"",m[m.length]=u[5]?_+i+l:"0"===c?_+l+i:l+_+i)}return m.join("")},n.cache={},n.parse=function(e){for(var t=e,n=[],o=[],i=0;t;){if(null!==(n=r.text.exec(t)))o[o.length]=n[0];else if(null!==(n=r.modulo.exec(t)))o[o.length]="%";else{if(null===(n=r.placeholder.exec(t)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){i|=1;var s=[],a=n[2],u=[];if(null===(u=r.key.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s[s.length]=u[1];""!==(a=a.substring(u[0].length));)if(null!==(u=r.key_access.exec(a)))s[s.length]=u[1];else{if(null===(u=r.index_access.exec(a)))throw new SyntaxError("[sprintf] failed to parse named argument key");s[s.length]=u[1]}n[2]=s}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o[o.length]=n}t=t.substring(n[0].length)}return o};function o(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}t.sprintf=n,t.vsprintf=function(e,t,r){return(r=(t||[]).slice(0)).splice(0,0,e),n.apply(null,r)}}("undefined"==typeof window||window)},function(e,t,r){"use strict";var n=r(0).format,o=r(2),i=r(7),s=r(39),a=r(40),u=r(41),l=r(42),c=r(43),p=r(10),h=r(44),f=r(45),g=r(46),d=r(47),m=r(11),y=e.exports=function(e){e=e||{},this.description=e.description,this.argumentDefault=e.argumentDefault,this.prefixChars=e.prefixChars||"",this.conflictHandler=e.conflictHandler,this._registries={},this.register("action",null,c),this.register("action","store",c),this.register("action","storeConst",p),this.register("action","storeTrue",h),this.register("action","storeFalse",f),this.register("action","append",a),this.register("action","appendConst",u),this.register("action","count",l),this.register("action","help",s),this.register("action","version",g),this.register("action","parsers",d),this._getHandler(),this._actions=[],this._optionStringActions={},this._actionGroups=[],this._mutuallyExclusiveGroups=[],this._defaults={},this._regexpNegativeNumber=new RegExp("^[-]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$"),this._hasNegativeNumberOptionals=[]},_=r(21),v=r(48);y.prototype.register=function(e,t,r){this._registries[e]=this._registries[e]||{},this._registries[e][t]=r},y.prototype._registryGet=function(e,t,r){return arguments.length<3&&(r=null),this._registries[e][t]||r},y.prototype.setDefaults=function(e){for(var t in e=e||{})i.has(e,t)&&(this._defaults[t]=e[t]);this._actions.forEach((function(t){i.has(e,t.dest)&&(t.defaultValue=e[t.dest])}))},y.prototype.getDefault=function(e){var t=i.has(this._defaults,e)?this._defaults[e]:null;return this._actions.forEach((function(r){r.dest===e&&i.has(r,"defaultValue")&&(t=r.defaultValue)})),t},y.prototype.addArgument=function(e,t){if(t=t||{},"string"==typeof(e=e)&&(e=[e]),!Array.isArray(e))throw new TypeError("addArgument first argument should be a string or an array");if("object"!=typeof t||Array.isArray(t))throw new TypeError("addArgument second argument should be a hash");if(!e||1===e.length&&this.prefixChars.indexOf(e[0][0])<0){if(e&&t.dest)throw new Error("dest supplied twice for positional argument");t=this._getPositional(e,t)}else t=this._getOptional(e,t);if(void 0===t.defaultValue){var r=t.dest;i.has(this._defaults,r)?t.defaultValue=this._defaults[r]:void 0!==this.argumentDefault&&(t.defaultValue=this.argumentDefault)}var o=this._popActionClass(t);if("function"!=typeof o)throw new Error(n('Unknown action "%s".',o));var s=new o(t),a=this._registryGet("type",s.type,s.type);if("function"!=typeof a)throw new Error(n('"%s" is not callable',a));return this._addAction(s)},y.prototype.addArgumentGroup=function(e){var t=new _(this,e);return this._actionGroups.push(t),t},y.prototype.addMutuallyExclusiveGroup=function(e){var t=new v(this,e);return this._mutuallyExclusiveGroups.push(t),t},y.prototype._addAction=function(e){var t=this;return this._checkConflict(e),this._actions.push(e),e.container=this,e.optionStrings.forEach((function(r){t._optionStringActions[r]=e})),e.optionStrings.forEach((function(e){e.match(t._regexpNegativeNumber)&&(t._hasNegativeNumberOptionals.some(Boolean)||t._hasNegativeNumberOptionals.push(!0))})),e},y.prototype._removeAction=function(e){var t=this._actions.indexOf(e);t>=0&&this._actions.splice(t,1)},y.prototype._addContainerActions=function(e){var t={};this._actionGroups.forEach((function(e){if(t[e.title])throw new Error(n('Cannot merge actions - two groups are named "%s".',e.title));t[e.title]=e}));var r,o={};function i(e){return e.getName()}e._actionGroups.forEach((function(e){t[e.title]||(t[e.title]=this.addArgumentGroup({title:e.title,description:e.description})),e._groupActions.forEach((function(r){o[i(r)]=t[e.title]}))}),this),e._mutuallyExclusiveGroups.forEach((function(e){r=this.addMutuallyExclusiveGroup({required:e.required}),e._groupActions.forEach((function(e){o[i(e)]=r}))}),this),e._actions.forEach((function(e){var t=i(e);o[t]?o[t]._addAction(e):this._addAction(e)}))},y.prototype._getPositional=function(e,t){if(Array.isArray(e)&&(e=e[0]),t.required)throw new Error('"required" is an invalid argument for positionals.');return t.nargs!==o.OPTIONAL&&t.nargs!==o.ZERO_OR_MORE&&(t.required=!0),t.nargs===o.ZERO_OR_MORE&&void 0===t.defaultValue&&(t.required=!0),t.dest=e,t.optionStrings=[],t},y.prototype._getOptional=function(e,t){var r=this.prefixChars,o=[],s=[];e.forEach((function(e){if(r.indexOf(e[0])<0)throw new Error(n('Invalid option string "%s": must start with a "%s".',e,r));o.push(e),e.length>1&&r.indexOf(e[1])>=0&&s.push(e)}));var a=t.dest||null;if(delete t.dest,!a){var u=s.length?s[0]:o[0];if(0===(a=i.trimChars(u,this.prefixChars)).length)throw new Error(n('dest= is required for options like "%s"',o.join(", ")));a=a.replace(/-/g,"_")}return t.dest=a,t.optionStrings=o,t},y.prototype._popActionClass=function(e,t){t=t||null;var r=e.action||t;return delete e.action,this._registryGet("action",r,r)},y.prototype._getHandler=function(){var e=this.conflictHandler,t=this["_handleConflict"+i.capitalize(e)];if(void 0===t)throw new Error("invalid conflict resolution value: "+e);return t},y.prototype._checkConflict=function(e){var t=this._optionStringActions,r=[];(e.optionStrings.forEach((function(e){var n=t[e];void 0!==n&&r.push([e,n])})),r.length>0)&&this._getHandler().call(this,e,r)},y.prototype._handleConflictError=function(e,t){var r=t.map((function(e){return e[0]}));throw r=r.join(", "),m(e,n("Conflicting option string(s): %s",r))},y.prototype._handleConflictResolve=function(e,t){var r=this;t.forEach((function(e){var t=e[0],n=e[1],o=n.optionStrings.indexOf(t);o>=0&&n.optionStrings.splice(o,1),delete r._optionStringActions[t],0===n.optionStrings.length&&n.container._removeAction(n)}))}},function(e,t,r){"use strict";var n=r(0),o=r(20),i=e.exports=function(e,t){(t=t||{}).conflictHandler=t.conflictHandler||e.conflictHandler,t.prefixChars=t.prefixChars||e.prefixChars,t.argumentDefault=t.argumentDefault||e.argumentDefault,o.call(this,t),this.title=t.title,this._groupActions=[],this._container=e,this._registries=e._registries,this._actions=e._actions,this._optionStringActions=e._optionStringActions,this._defaults=e._defaults,this._hasNegativeNumberOptionals=e._hasNegativeNumberOptionals,this._mutuallyExclusiveGroups=e._mutuallyExclusiveGroups};n.inherits(i,o),i.prototype._addAction=function(e){return e=o.prototype._addAction.call(this,e),this._groupActions.push(e),e},i.prototype._removeAction=function(e){o.prototype._removeAction.call(this,e);var t=this._groupActions.indexOf(e);t>=0&&this._groupActions.splice(t,1)}},function(e,t,r){"use strict";var n=r(7),o=e.exports=function(e){n.extend(this,e)};o.prototype.isset=function(e){return n.has(this,e)},o.prototype.set=function(e,t){return"object"==typeof e?n.extend(this,e):this[e]=t,this},o.prototype.get=function(e,t){return this[e]?this[e]:t},o.prototype.unset=function(e,t){var r=this[e];return null!==r?(delete this[e],r):t}},function(e,t){e.exports=require("https")},function(e,t){e.exports=require("readline")},function(e,t,r){"use strict";e.exports=r(37)},function(e,t,r){r(27).install()},function(e,t,r){(function(e){var n,o=r(29).SourceMapConsumer,i=r(8);try{(n=r(5)).existsSync&&n.readFileSync||(n=null)}catch(e){}var s=r(36);function a(e,t){return e.require(t)}var u=!1,l=!1,c=!1,p="auto",h={},f={},g=/^data:application\/json[^,]+base64,/,d=[],m=[];function y(){return"browser"===p||"node"!==p&&("undefined"!=typeof window&&"function"==typeof XMLHttpRequest&&!(window.require&&window.module&&window.process&&"renderer"===window.process.type))}function _(e){return function(t){for(var r=0;r<e.length;r++){var n=e[r](t);if(n)return n}return null}}var v=_(d);function b(e,t){if(!e)return t;var r=i.dirname(e),n=/^\w+:\/\/[^\/]*/.exec(r),o=n?n[0]:"",s=r.slice(o.length);return o&&/^\/\w\:/.test(s)?(o+="/")+i.resolve(r.slice(o.length),t).replace(/\\/g,"/"):o+i.resolve(r.slice(o.length),t)}d.push((function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,(function(e,t){return t?"":"/"}))),e in h)return h[e];var t="";try{if(n)n.existsSync(e)&&(t=n.readFileSync(e,"utf8"));else{var r=new XMLHttpRequest;r.open("GET",e,!1),r.send(null),4===r.readyState&&200===r.status&&(t=r.responseText)}}catch(e){}return h[e]=t}));var w=_(m);function S(e){var t=f[e.source];if(!t){var r=w(e.source);r?(t=f[e.source]={url:r.url,map:new o(r.map)}).map.sourcesContent&&t.map.sources.forEach((function(e,r){var n=t.map.sourcesContent[r];if(n){var o=b(t.url,e);h[o]=n}})):t=f[e.source]={url:null,map:null}}if(t&&t.map&&"function"==typeof t.map.originalPositionFor){var n=t.map.originalPositionFor(e);if(null!==n.source)return n.source=b(t.url,n.source),n}return e}function E(){var e,t="";if(this.isNative())t="native";else{!(e=this.getScriptNameOrSourceURL())&&this.isEval()&&(t=this.getEvalOrigin(),t+=", "),t+=e||"<anonymous>";var r=this.getLineNumber();if(null!=r){t+=":"+r;var n=this.getColumnNumber();n&&(t+=":"+n)}}var o="",i=this.getFunctionName(),s=!0,a=this.isConstructor();if(!(this.isToplevel()||a)){var u=this.getTypeName();"[object Object]"===u&&(u="null");var l=this.getMethodName();i?(u&&0!=i.indexOf(u)&&(o+=u+"."),o+=i,l&&i.indexOf("."+l)!=i.length-l.length-1&&(o+=" [as "+l+"]")):o+=u+"."+(l||"<anonymous>")}else a?o+="new "+(i||"<anonymous>"):i?o+=i:(o+=t,s=!1);return s&&(o+=" ("+t+")"),o}function A(e){var t={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(r){t[r]=/^(?:is|get)/.test(r)?function(){return e[r].call(e)}:e[r]})),t.toString=E,t}function O(e,t){if(void 0===t&&(t={nextPosition:null,curPosition:null}),e.isNative())return t.curPosition=null,e;var r=e.getFileName()||e.getScriptNameOrSourceURL();if(r){var n=e.getLineNumber(),o=e.getColumnNumber()-1,i=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/.test(process.version)?0:62;1===n&&o>i&&!y()&&!e.isEval()&&(o-=i);var s=S({source:r,line:n,column:o});t.curPosition=s;var a=(e=A(e)).getFunctionName;return e.getFunctionName=function(){return null==t.nextPosition?a():t.nextPosition.name||a()},e.getFileName=function(){return s.source},e.getLineNumber=function(){return s.line},e.getColumnNumber=function(){return s.column+1},e.getScriptNameOrSourceURL=function(){return s.source},e}var u=e.isEval()&&e.getEvalOrigin();return u?(u=function e(t){var r=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(t);if(r){var n=S({source:r[2],line:+r[3],column:r[4]-1});return"eval at "+r[1]+" ("+n.source+":"+n.line+":"+(n.column+1)+")"}return(r=/^eval at ([^(]+) \((.+)\)$/.exec(t))?"eval at "+r[1]+" ("+e(r[2])+")":t}(u),(e=A(e)).getEvalOrigin=function(){return u},e):e}function x(e,t){c&&(h={},f={});for(var r=(e.name||"Error")+": "+(e.message||""),n={nextPosition:null,curPosition:null},o=[],i=t.length-1;i>=0;i--)o.push("\n    at "+O(t[i],n)),n.nextPosition=n.curPosition;return n.curPosition=n.nextPosition=null,r+o.reverse().join("")}function C(e){var t=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(t){var r=t[1],o=+t[2],i=+t[3],s=h[r];if(!s&&n&&n.existsSync(r))try{s=n.readFileSync(r,"utf8")}catch(e){s=""}if(s){var a=s.split(/(?:\r\n|\r|\n)/)[o-1];if(a)return r+":"+o+"\n"+a+"\n"+new Array(i).join(" ")+"^"}}return null}function P(e){var t=C(e);process.stderr._handle&&process.stderr._handle.setBlocking&&process.stderr._handle.setBlocking(!0),t&&(console.error(),console.error(t)),console.error(e.stack),process.exit(1)}m.push((function(e){var t,r=function(e){var t;if(y())try{var r=new XMLHttpRequest;r.open("GET",e,!1),r.send(null),t=4===r.readyState?r.responseText:null;var n=r.getResponseHeader("SourceMap")||r.getResponseHeader("X-SourceMap");if(n)return n}catch(e){}t=v(e);for(var o,i,s=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;i=s.exec(t);)o=i;return o?o[1]:null}(e);if(!r)return null;if(g.test(r)){var n=r.slice(r.indexOf(",")+1);t=s(n,"base64").toString(),r=e}else r=b(e,r),t=v(r);return t?{url:r,map:t}:null}));var R=d.slice(0),L=m.slice(0);t.wrapCallSite=O,t.getErrorSource=C,t.mapSourcePosition=S,t.retrieveSourceMap=w,t.install=function(t){if((t=t||{}).environment&&(p=t.environment,-1===["node","browser","auto"].indexOf(p)))throw new Error("environment "+p+" was unknown. Available options are {auto, browser, node}");if(t.retrieveFile&&(t.overrideRetrieveFile&&(d.length=0),d.unshift(t.retrieveFile)),t.retrieveSourceMap&&(t.overrideRetrieveSourceMap&&(m.length=0),m.unshift(t.retrieveSourceMap)),t.hookRequire&&!y()){var r=a(e,"module"),n=r.prototype._compile;n.__sourceMapSupport||(r.prototype._compile=function(e,t){return h[t]=e,f[t]=void 0,n.call(this,e,t)},r.prototype._compile.__sourceMapSupport=!0)}if(c||(c="emptyCacheBetweenOperations"in t&&t.emptyCacheBetweenOperations),u||(u=!0,Error.prepareStackTrace=x),!l){var o=!("handleUncaughtExceptions"in t)||t.handleUncaughtExceptions;try{!1===a(e,"worker_threads").isMainThread&&(o=!1)}catch(e){}o&&"object"==typeof process&&null!==process&&"function"==typeof process.on&&(l=!0,i=process.emit,process.emit=function(e){if("uncaughtException"===e){var t=arguments[1]&&arguments[1].stack,r=this.listeners(e).length>0;if(t&&!r)return P(arguments[1])}return i.apply(this,arguments)})}var i},t.resetRetrieveHandlers=function(){d.length=0,m.length=0,d=R.slice(0),m=L.slice(0),w=_(m),v=_(d)}}).call(this,r(28)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){t.SourceMapGenerator=r(16).SourceMapGenerator,t.SourceMapConsumer=r(32).SourceMapConsumer,t.SourceNode=r(35).SourceNode},function(e,t){var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");t.encode=function(e){if(0<=e&&e<r.length)return r[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},function(e,t,r){var n=r(6);function o(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}o.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},o.prototype.add=function(e){var t,r,o,i,s,a;t=this._last,r=e,o=t.generatedLine,i=r.generatedLine,s=t.generatedColumn,a=r.generatedColumn,i>o||i==o&&a>=s||n.compareByGeneratedPositionsInflated(t,r)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},o.prototype.toArray=function(){return this._sorted||(this._array.sort(n.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},t.MappingList=o},function(e,t,r){var n=r(6),o=r(33),i=r(18).ArraySet,s=r(17),a=r(34).quickSort;function u(e,t){var r=e;return"string"==typeof e&&(r=n.parseSourceMapInput(e)),null!=r.sections?new p(r,t):new l(r,t)}function l(e,t){var r=e;"string"==typeof e&&(r=n.parseSourceMapInput(e));var o=n.getArg(r,"version"),s=n.getArg(r,"sources"),a=n.getArg(r,"names",[]),u=n.getArg(r,"sourceRoot",null),l=n.getArg(r,"sourcesContent",null),c=n.getArg(r,"mappings"),p=n.getArg(r,"file",null);if(o!=this._version)throw new Error("Unsupported version: "+o);u&&(u=n.normalize(u)),s=s.map(String).map(n.normalize).map((function(e){return u&&n.isAbsolute(u)&&n.isAbsolute(e)?n.relative(u,e):e})),this._names=i.fromArray(a.map(String),!0),this._sources=i.fromArray(s,!0),this._absoluteSources=this._sources.toArray().map((function(e){return n.computeSourceURL(u,e,t)})),this.sourceRoot=u,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=t,this.file=p}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function p(e,t){var r=e;"string"==typeof e&&(r=n.parseSourceMapInput(e));var o=n.getArg(r,"version"),s=n.getArg(r,"sections");if(o!=this._version)throw new Error("Unsupported version: "+o);this._sources=new i,this._names=new i;var a={line:-1,column:0};this._sections=s.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var r=n.getArg(e,"offset"),o=n.getArg(r,"line"),i=n.getArg(r,"column");if(o<a.line||o===a.line&&i<a.column)throw new Error("Section offsets must be ordered and non-overlapping.");return a=r,{generatedOffset:{generatedLine:o+1,generatedColumn:i+1},consumer:new u(n.getArg(e,"map"),t)}}))}u.fromSourceMap=function(e,t){return l.fromSourceMap(e,t)},u.prototype._version=3,u.prototype.__generatedMappings=null,Object.defineProperty(u.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),u.prototype.__originalMappings=null,Object.defineProperty(u.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),u.prototype._charIsMappingSeparator=function(e,t){var r=e.charAt(t);return";"===r||","===r},u.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},u.GENERATED_ORDER=1,u.ORIGINAL_ORDER=2,u.GREATEST_LOWER_BOUND=1,u.LEAST_UPPER_BOUND=2,u.prototype.eachMapping=function(e,t,r){var o,i=t||null;switch(r||u.GENERATED_ORDER){case u.GENERATED_ORDER:o=this._generatedMappings;break;case u.ORIGINAL_ORDER:o=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var s=this.sourceRoot;o.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=n.computeSourceURL(s,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,i)},u.prototype.allGeneratedPositionsFor=function(e){var t=n.getArg(e,"line"),r={source:n.getArg(e,"source"),originalLine:t,originalColumn:n.getArg(e,"column",0)};if(r.source=this._findSourceIndex(r.source),r.source<0)return[];var i=[],s=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",n.compareByOriginalPositions,o.LEAST_UPPER_BOUND);if(s>=0){var a=this._originalMappings[s];if(void 0===e.column)for(var u=a.originalLine;a&&a.originalLine===u;)i.push({line:n.getArg(a,"generatedLine",null),column:n.getArg(a,"generatedColumn",null),lastColumn:n.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++s];else for(var l=a.originalColumn;a&&a.originalLine===t&&a.originalColumn==l;)i.push({line:n.getArg(a,"generatedLine",null),column:n.getArg(a,"generatedColumn",null),lastColumn:n.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++s]}return i},t.SourceMapConsumer=u,l.prototype=Object.create(u.prototype),l.prototype.consumer=u,l.prototype._findSourceIndex=function(e){var t,r=e;if(null!=this.sourceRoot&&(r=n.relative(this.sourceRoot,r)),this._sources.has(r))return this._sources.indexOf(r);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},l.fromSourceMap=function(e,t){var r=Object.create(l.prototype),o=r._names=i.fromArray(e._names.toArray(),!0),s=r._sources=i.fromArray(e._sources.toArray(),!0);r.sourceRoot=e._sourceRoot,r.sourcesContent=e._generateSourcesContent(r._sources.toArray(),r.sourceRoot),r.file=e._file,r._sourceMapURL=t,r._absoluteSources=r._sources.toArray().map((function(e){return n.computeSourceURL(r.sourceRoot,e,t)}));for(var u=e._mappings.toArray().slice(),p=r.__generatedMappings=[],h=r.__originalMappings=[],f=0,g=u.length;f<g;f++){var d=u[f],m=new c;m.generatedLine=d.generatedLine,m.generatedColumn=d.generatedColumn,d.source&&(m.source=s.indexOf(d.source),m.originalLine=d.originalLine,m.originalColumn=d.originalColumn,d.name&&(m.name=o.indexOf(d.name)),h.push(m)),p.push(m)}return a(r.__originalMappings,n.compareByOriginalPositions),r},l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),l.prototype._parseMappings=function(e,t){for(var r,o,i,u,l,p=1,h=0,f=0,g=0,d=0,m=0,y=e.length,_=0,v={},b={},w=[],S=[];_<y;)if(";"===e.charAt(_))p++,_++,h=0;else if(","===e.charAt(_))_++;else{for((r=new c).generatedLine=p,u=_;u<y&&!this._charIsMappingSeparator(e,u);u++);if(i=v[o=e.slice(_,u)])_+=o.length;else{for(i=[];_<u;)s.decode(e,_,b),l=b.value,_=b.rest,i.push(l);if(2===i.length)throw new Error("Found a source, but no line and column");if(3===i.length)throw new Error("Found a source and line, but no column");v[o]=i}r.generatedColumn=h+i[0],h=r.generatedColumn,i.length>1&&(r.source=d+i[1],d+=i[1],r.originalLine=f+i[2],f=r.originalLine,r.originalLine+=1,r.originalColumn=g+i[3],g=r.originalColumn,i.length>4&&(r.name=m+i[4],m+=i[4])),S.push(r),"number"==typeof r.originalLine&&w.push(r)}a(S,n.compareByGeneratedPositionsDeflated),this.__generatedMappings=S,a(w,n.compareByOriginalPositions),this.__originalMappings=w},l.prototype._findMapping=function(e,t,r,n,i,s){if(e[r]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[n]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[n]);return o.search(e,t,i,s)},l.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var r=this._generatedMappings[e+1];if(t.generatedLine===r.generatedLine){t.lastGeneratedColumn=r.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},l.prototype.originalPositionFor=function(e){var t={generatedLine:n.getArg(e,"line"),generatedColumn:n.getArg(e,"column")},r=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",n.compareByGeneratedPositionsDeflated,n.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(r>=0){var o=this._generatedMappings[r];if(o.generatedLine===t.generatedLine){var i=n.getArg(o,"source",null);null!==i&&(i=this._sources.at(i),i=n.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var s=n.getArg(o,"name",null);return null!==s&&(s=this._names.at(s)),{source:i,line:n.getArg(o,"originalLine",null),column:n.getArg(o,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},l.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var r=this._findSourceIndex(e);if(r>=0)return this.sourcesContent[r];var o,i=e;if(null!=this.sourceRoot&&(i=n.relative(this.sourceRoot,i)),null!=this.sourceRoot&&(o=n.urlParse(this.sourceRoot))){var s=i.replace(/^file:\/\//,"");if("file"==o.scheme&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!o.path||"/"==o.path)&&this._sources.has("/"+i))return this.sourcesContent[this._sources.indexOf("/"+i)]}if(t)return null;throw new Error('"'+i+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(e){var t=n.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var r={source:t,originalLine:n.getArg(e,"line"),originalColumn:n.getArg(e,"column")},o=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",n.compareByOriginalPositions,n.getArg(e,"bias",u.GREATEST_LOWER_BOUND));if(o>=0){var i=this._originalMappings[o];if(i.source===r.source)return{line:n.getArg(i,"generatedLine",null),column:n.getArg(i,"generatedColumn",null),lastColumn:n.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},t.BasicSourceMapConsumer=l,p.prototype=Object.create(u.prototype),p.prototype.constructor=u,p.prototype._version=3,Object.defineProperty(p.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var r=0;r<this._sections[t].consumer.sources.length;r++)e.push(this._sections[t].consumer.sources[r]);return e}}),p.prototype.originalPositionFor=function(e){var t={generatedLine:n.getArg(e,"line"),generatedColumn:n.getArg(e,"column")},r=o.search(t,this._sections,(function(e,t){var r=e.generatedLine-t.generatedOffset.generatedLine;return r||e.generatedColumn-t.generatedOffset.generatedColumn})),i=this._sections[r];return i?i.consumer.originalPositionFor({line:t.generatedLine-(i.generatedOffset.generatedLine-1),column:t.generatedColumn-(i.generatedOffset.generatedLine===t.generatedLine?i.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},p.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},p.prototype.sourceContentFor=function(e,t){for(var r=0;r<this._sections.length;r++){var n=this._sections[r].consumer.sourceContentFor(e,!0);if(n)return n}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},p.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var r=this._sections[t];if(-1!==r.consumer._findSourceIndex(n.getArg(e,"source"))){var o=r.consumer.generatedPositionFor(e);if(o)return{line:o.line+(r.generatedOffset.generatedLine-1),column:o.column+(r.generatedOffset.generatedLine===o.line?r.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},p.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var r=0;r<this._sections.length;r++)for(var o=this._sections[r],i=o.consumer._generatedMappings,s=0;s<i.length;s++){var u=i[s],l=o.consumer._sources.at(u.source);l=n.computeSourceURL(o.consumer.sourceRoot,l,this._sourceMapURL),this._sources.add(l),l=this._sources.indexOf(l);var c=null;u.name&&(c=o.consumer._names.at(u.name),this._names.add(c),c=this._names.indexOf(c));var p={source:l,generatedLine:u.generatedLine+(o.generatedOffset.generatedLine-1),generatedColumn:u.generatedColumn+(o.generatedOffset.generatedLine===u.generatedLine?o.generatedOffset.generatedColumn-1:0),originalLine:u.originalLine,originalColumn:u.originalColumn,name:c};this.__generatedMappings.push(p),"number"==typeof p.originalLine&&this.__originalMappings.push(p)}a(this.__generatedMappings,n.compareByGeneratedPositionsDeflated),a(this.__originalMappings,n.compareByOriginalPositions)},t.IndexedSourceMapConsumer=p},function(e,t){t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,r,n,o){if(0===r.length)return-1;var i=function e(r,n,o,i,s,a){var u=Math.floor((n-r)/2)+r,l=s(o,i[u],!0);return 0===l?u:l>0?n-u>1?e(u,n,o,i,s,a):a==t.LEAST_UPPER_BOUND?n<i.length?n:-1:u:u-r>1?e(r,u,o,i,s,a):a==t.LEAST_UPPER_BOUND?u:r<0?-1:r}(-1,r.length,e,r,n,o||t.GREATEST_LOWER_BOUND);if(i<0)return-1;for(;i-1>=0&&0===n(r[i],r[i-1],!0);)--i;return i}},function(e,t){function r(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function n(e,t,o,i){if(o<i){var s=o-1;r(e,(c=o,p=i,Math.round(c+Math.random()*(p-c))),i);for(var a=e[i],u=o;u<i;u++)t(e[u],a)<=0&&r(e,s+=1,u);r(e,s+1,u);var l=s+1;n(e,t,o,l-1),n(e,t,l+1,i)}var c,p}t.quickSort=function(e,t){n(e,t,0,e.length-1)}},function(e,t,r){var n=r(16).SourceMapGenerator,o=r(6),i=/(\r?\n)/,s="$$$isSourceNode$$$";function a(e,t,r,n,o){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==r?null:r,this.name=null==o?null:o,this[s]=!0,null!=n&&this.add(n)}a.fromStringWithSourceMap=function(e,t,r){var n=new a,s=e.split(i),u=0,l=function(){return e()+(e()||"");function e(){return u<s.length?s[u++]:void 0}},c=1,p=0,h=null;return t.eachMapping((function(e){if(null!==h){if(!(c<e.generatedLine)){var t=(r=s[u]||"").substr(0,e.generatedColumn-p);return s[u]=r.substr(e.generatedColumn-p),p=e.generatedColumn,f(h,t),void(h=e)}f(h,l()),c++,p=0}for(;c<e.generatedLine;)n.add(l()),c++;if(p<e.generatedColumn){var r=s[u]||"";n.add(r.substr(0,e.generatedColumn)),s[u]=r.substr(e.generatedColumn),p=e.generatedColumn}h=e}),this),u<s.length&&(h&&f(h,l()),n.add(s.splice(u).join(""))),t.sources.forEach((function(e){var i=t.sourceContentFor(e);null!=i&&(null!=r&&(e=o.join(r,e)),n.setSourceContent(e,i))})),n;function f(e,t){if(null===e||void 0===e.source)n.add(t);else{var i=r?o.join(r,e.source):e.source;n.add(new a(e.originalLine,e.originalColumn,i,t,e.name))}}},a.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},a.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[s]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},a.prototype.walk=function(e){for(var t,r=0,n=this.children.length;r<n;r++)(t=this.children[r])[s]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},a.prototype.join=function(e){var t,r,n=this.children.length;if(n>0){for(t=[],r=0;r<n-1;r++)t.push(this.children[r]),t.push(e);t.push(this.children[r]),this.children=t}return this},a.prototype.replaceRight=function(e,t){var r=this.children[this.children.length-1];return r[s]?r.replaceRight(e,t):"string"==typeof r?this.children[this.children.length-1]=r.replace(e,t):this.children.push("".replace(e,t)),this},a.prototype.setSourceContent=function(e,t){this.sourceContents[o.toSetString(e)]=t},a.prototype.walkSourceContents=function(e){for(var t=0,r=this.children.length;t<r;t++)this.children[t][s]&&this.children[t].walkSourceContents(e);var n=Object.keys(this.sourceContents);for(t=0,r=n.length;t<r;t++)e(o.fromSetString(n[t]),this.sourceContents[n[t]])},a.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},a.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},r=new n(e),o=!1,i=null,s=null,a=null,u=null;return this.walk((function(e,n){t.code+=e,null!==n.source&&null!==n.line&&null!==n.column?(i===n.source&&s===n.line&&a===n.column&&u===n.name||r.addMapping({source:n.source,original:{line:n.line,column:n.column},generated:{line:t.line,column:t.column},name:n.name}),i=n.source,s=n.line,a=n.column,u=n.name,o=!0):o&&(r.addMapping({generated:{line:t.line,column:t.column}}),i=null,o=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(i=null,o=!1):o&&r.addMapping({source:n.source,original:{line:n.line,column:n.column},generated:{line:t.line,column:t.column},name:n.name})):t.column++})),this.walkSourceContents((function(e,t){r.setSourceContent(e,t)})),{code:t.code,map:r}},t.SourceNode=a},function(e,t){var r=Object.prototype.toString,n="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,t,o){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return i=e,"ArrayBuffer"===r.call(i).slice(8,-1)?function(e,t,r){t>>>=0;var o=e.byteLength-t;if(o<0)throw new RangeError("'offset' is out of bounds");if(void 0===r)r=o;else if((r>>>=0)>o)throw new RangeError("'length' is out of bounds");return n?Buffer.from(e.slice(t,t+r)):new Buffer(new Uint8Array(e.slice(t,t+r)))}(e,t,o):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');return n?Buffer.from(e,t):new Buffer(e,t)}(e,t):n?Buffer.from(e):new Buffer(e);var i}},function(e,t,r){"use strict";e.exports.ArgumentParser=r(38),e.exports.Namespace=r(22),e.exports.Action=r(3),e.exports.HelpFormatter=r(12),e.exports.Const=r(2),e.exports.ArgumentDefaultsHelpFormatter=r(13).ArgumentDefaultsHelpFormatter,e.exports.RawDescriptionHelpFormatter=r(13).RawDescriptionHelpFormatter,e.exports.RawTextHelpFormatter=r(13).RawTextHelpFormatter},function(e,t,r){"use strict";var n=r(0),o=r(0).format,i=r(8),s=r(19).sprintf,a=r(2),u=r(7),l=r(20),c=r(11),p=r(12),h=r(22);function f(e){if(!(this instanceof f))return new f(e);var t=this;function r(e){return e}(e=e||{}).description=e.description||null,e.argumentDefault=e.argumentDefault||null,e.prefixChars=e.prefixChars||"-",e.conflictHandler=e.conflictHandler||"error",l.call(this,e),e.addHelp=void 0===e.addHelp||!!e.addHelp,e.parents=e.parents||[],e.prog=e.prog||i.basename(process.argv[1]),this.prog=e.prog,this.usage=e.usage,this.epilog=e.epilog,this.version=e.version,this.debug=!0===e.debug,this.formatterClass=e.formatterClass||p,this.fromfilePrefixChars=e.fromfilePrefixChars||null,this._positionals=this.addArgumentGroup({title:"Positional arguments"}),this._optionals=this.addArgumentGroup({title:"Optional arguments"}),this._subparsers=null,this.register("type","auto",r),this.register("type",null,r),this.register("type","int",(function(e){var t=parseInt(e,10);if(isNaN(t))throw new Error(e+" is not a valid integer.");return t})),this.register("type","float",(function(e){var t=parseFloat(e);if(isNaN(t))throw new Error(e+" is not a valid float.");return t})),this.register("type","string",(function(e){return""+e}));var n=this.prefixChars.indexOf("-")>-1?"-":this.prefixChars[0];e.addHelp&&this.addArgument([n+"h",n+n+"help"],{action:"help",defaultValue:a.SUPPRESS,help:"Show this help message and exit."}),void 0!==this.version&&this.addArgument([n+"v",n+n+"version"],{action:"version",version:this.version,defaultValue:a.SUPPRESS,help:"Show program's version number and exit."}),e.parents.forEach((function(e){if(t._addContainerActions(e),void 0!==e._defaults)for(var r in e._defaults)e._defaults.hasOwnProperty(r)&&(t._defaults[r]=e._defaults[r])}))}n.inherits(f,l),f.prototype.addSubparsers=function(e){if(this._subparsers&&this.error("Cannot have multiple subparser arguments."),(e=e||{}).debug=!0===this.debug,e.optionStrings=[],e.parserClass=e.parserClass||f,e.title||e.description?(this._subparsers=this.addArgumentGroup({title:e.title||"subcommands",description:e.description}),delete e.title,delete e.description):this._subparsers=this._positionals,!e.prog){var t=this._getFormatter(),r=this._getPositionalActions(),n=this._mutuallyExclusiveGroups;t.addUsage(this.usage,r,n,""),e.prog=t.formatHelp().trim()}var o=new(this._popActionClass(e,"parsers"))(e);return this._subparsers._addAction(o),o},f.prototype._addAction=function(e){return e.isOptional()?this._optionals._addAction(e):this._positionals._addAction(e),e},f.prototype._getOptionalActions=function(){return this._actions.filter((function(e){return e.isOptional()}))},f.prototype._getPositionalActions=function(){return this._actions.filter((function(e){return e.isPositional()}))},f.prototype.parseArgs=function(e,t){var r,n=this.parseKnownArgs(e,t);return e=n[0],(r=n[1])&&r.length>0&&this.error(o("Unrecognized arguments: %s.",r.join(" "))),e},f.prototype.parseKnownArgs=function(e,t){var r=this;e=e||process.argv.slice(2),t=t||new h,r._actions.forEach((function(e){if(e.dest!==a.SUPPRESS&&!u.has(t,e.dest)&&e.defaultValue!==a.SUPPRESS){var n=e.defaultValue;"string"==typeof e.defaultValue&&(n=r._getValue(e,n)),t[e.dest]=n}})),Object.keys(r._defaults).forEach((function(e){t[e]=r._defaults[e]}));try{var n=this._parseKnownArgs(e,t);return t=n[0],e=n[1],u.has(t,a._UNRECOGNIZED_ARGS_ATTR)&&(e=u.arrayUnion(e,t[a._UNRECOGNIZED_ARGS_ATTR]),delete t[a._UNRECOGNIZED_ARGS_ATTR]),[t,e]}catch(e){this.error(e)}},f.prototype._parseKnownArgs=function(e,t){var r,n,i=this,l=[];function p(e){return e.getName()}null!==this.fromfilePrefixChars&&(e=this._readArgsFromFiles(e));var h={};this._mutuallyExclusiveGroups.forEach((function(e){e._groupActions.forEach((function(e,t,o){n=p(e),u.has(h,n)||(h[n]=[]),(r=h[n]).push.apply(r,o.slice(0,t)),r.push.apply(r,o.slice(t+1))}))}));var f={},g=[];e.forEach((function(t,r){if("--"===t)for(g.push("-");r<e.length;)g.push("A"),r++;else{var n,o=i._parseOptional(t);o?(f[r]=o,n="O"):n="A",g.push(n)}}));var d=g.join(""),m=[],y=[];function _(e,r,n){m.push(e);var s=i._getValues(e,r);s!==e.defaultValue&&(y.push(e),h[p(e)]&&h[p(e)].forEach((function(t){if(y.indexOf(t)>=0)throw c(e,o('Not allowed with argument "%s".',t.getName()))}))),s!==a.SUPPRESS&&e.call(i,t,s,n)}function v(t){for(var r,n,o,a,u=f[t],p=u[0],h=u[1],g=u[2],m=[];;){if(!p)return l.push(e[t]),t+1;if(!g){o=t+1;var y=d.substr(o);a=o+(n=i._matchArgument(p,y)),r=e.slice(o,a),m.push([p,r,h]);break}n=i._matchArgument(p,"A");var v=i.prefixChars;if(!(0===n&&v.indexOf(h[1])<0)){if(1===n){a=t+1,r=[g],m.push([p,r,h]);break}throw c(p,s("ignored explicit argument %r",g))}m.push([p,[],h]),h=h[0]+g[0];var b=g.slice(1)||null,w=i._optionStringActions;if(!(Object.keys(w).indexOf(h)>=0))throw c(p,s("ignored explicit argument %r",g));p=w[h],g=b}if(m.length<1)throw new Error("length should be > 0");for(var S=0;S<m.length;S++)_.apply(i,m[S]);return a}var b=i._getPositionalActions();function w(t){for(var r=d.substr(t),n=i._matchArgumentsPartial(b,r),o=0;o<b.length;o++){var s=b[o],a=n[o];if(void 0!==a){var u=e.slice(t,t+a);t+=a,_(s,u)}}return b=b.slice(n.length),t}var S,E,A,O=0,x=-1;for(Object.keys(f).forEach((function(e){x=Math.max(x,parseInt(e,10))}));O<=x;){for(S in A=null,f)f.hasOwnProperty(S)&&(S=parseInt(S,10))>=O&&(A=null!==A?Math.min(A,S):S);if(O!==A){if((E=w(O))>O){O=E;continue}O=E}if(!f[O]){var C=e.slice(O,A);l=l.concat(C),O=A}O=v(O)}var P=w(O);l=l.concat(e.slice(P)),b.length>0&&i.error("too few arguments"),i._actions.forEach((function(e){e.required&&m.indexOf(e)<0&&i.error(o('Argument "%s" is required',e.getName()))}));return i._mutuallyExclusiveGroups.forEach((function(e){if(e.required&&!e._groupActions.some((function(e){return-1!==y.indexOf(e)}))){var t=[];e._groupActions.forEach((function(e){e.help!==a.SUPPRESS&&t.push(e.getName())}));var r="one of the arguments "+(t=t.join(" "))+" is required";i.error(r)}})),[t,l]},f.prototype._readArgsFromFiles=function(e){var t=this,n=r(5),o=[];return e.forEach((function(e){if(t.fromfilePrefixChars.indexOf(e[0])<0)o.push(e);else try{var r=[],i=e.slice(1),s=n.readFileSync(i,"utf8");(s=s.trim().split("\n")).forEach((function(e){t.convertArgLineToArgs(e).forEach((function(e){r.push(e)})),r=t._readArgsFromFiles(r)})),o.push.apply(o,r)}catch(e){return t.error(e.message)}})),o},f.prototype.convertArgLineToArgs=function(e){return[e]},f.prototype._matchArgument=function(e,t){var r,n=new RegExp("^"+this._getNargsPattern(e)),i=t.match(n);if(!i){switch(e.nargs){case void 0:case null:r="Expected one argument.";break;case a.OPTIONAL:r="Expected at most one argument.";break;case a.ONE_OR_MORE:r="Expected at least one argument.";break;default:r="Expected %s argument(s)"}throw c(e,o(r,e.nargs))}return i[1].length},f.prototype._matchArgumentsPartial=function(e,t){var r,n,o,i,s,a=[];function u(e){return e.length}for(i=e.length;i>0;i--){for(n="",r=e.slice(0,i),s=0;s<r.length;s++)n+=this._getNargsPattern(r[s]);if(n=new RegExp("^"+n),(o=t.match(n))&&o.length>0){o=o.splice(1),a=a.concat(o.map(u));break}}return a},f.prototype._parseOptional=function(e){var t,r,n;if(!e)return null;if(this.prefixChars.indexOf(e[0])<0)return null;if(this._optionStringActions[e])return[this._optionStringActions[e],e,null];if(1===e.length)return null;if(e.indexOf("=")>=0&&(t=e.split("=",1)[0],r=e.slice(t.length+1),this._optionStringActions[t]))return[this._optionStringActions[t],t,r];if((n=this._getOptionTuples(e)).length>1){var i=n.map((function(e){return e[1]}));this.error(o('Ambiguous option: "%s" could match %s.',e,i.join(", ")))}else if(1===n.length)return n[0];return e.match(this._regexpNegativeNumber)&&!this._hasNegativeNumberOptionals.some(Boolean)||e.search(" ")>=0?null:[null,e,null]},f.prototype._getOptionTuples=function(e){var t,r,n,i,s=[],a=this.prefixChars;if(a.indexOf(e[0])>=0&&a.indexOf(e[1])>=0){if(e.indexOf("=")>=0){var l=e.split("=",1);t=l[0],r=l[1]}else t=e,r=null;for(i in this._optionStringActions)i.substr(0,t.length)===t&&(n=this._optionStringActions[i],s.push([n,i,r]))}else{if(!(a.indexOf(e[0])>=0&&a.indexOf(e[1])<0))throw new Error(o("Unexpected option string: %s.",e));t=e,r=null;var c=e.substr(0,2),p=e.substr(2);for(i in this._optionStringActions)u.has(this._optionStringActions,i)&&(n=this._optionStringActions[i],i===c?s.push([n,i,p]):i.substr(0,t.length)===t&&s.push([n,i,r]))}return s},f.prototype._getNargsPattern=function(e){var t;switch(e.nargs){case void 0:case null:t="(-*A-*)";break;case a.OPTIONAL:t="(-*A?-*)";break;case a.ZERO_OR_MORE:t="(-*[A-]*)";break;case a.ONE_OR_MORE:t="(-*A[A-]*)";break;case a.REMAINDER:t="([-AO]*)";break;case a.PARSER:t="(-*A[-AO]*)";break;default:t="(-*"+u.repeat("-*A",e.nargs)+"-*)"}return e.isOptional()&&(t=(t=t.replace(/-\*/g,"")).replace(/-/g,"")),t},f.prototype._getValues=function(e,t){var r,n,o=this;return e.nargs!==a.PARSER&&e.nargs!==a.REMAINDER&&(t=t.filter((function(e){return"--"!==e}))),0===t.length&&e.nargs===a.OPTIONAL?"string"==typeof(r=e.isOptional()?e.constant:e.defaultValue)&&(r=this._getValue(e,r),this._checkValue(e,r)):0===t.length&&e.nargs===a.ZERO_OR_MORE&&0===e.optionStrings.length?(r=e.defaultValue||t,this._checkValue(e,r)):1!==t.length||e.nargs&&e.nargs!==a.OPTIONAL?e.nargs===a.REMAINDER?r=t.map((function(t){return o._getValue(e,t)})):e.nargs===a.PARSER?(r=t.map((function(t){return o._getValue(e,t)})),this._checkValue(e,r[0])):(r=t.map((function(t){return o._getValue(e,t)}))).forEach((function(t){o._checkValue(e,t)})):(n=t[0],r=this._getValue(e,n),this._checkValue(e,r)),r},f.prototype._getValue=function(e,t){var r,n=this._registryGet("type",e.type,e.type);if("function"!=typeof n){var i=o("%s is not callable",n);throw c(e,i)}try{r=n(t)}catch(r){var s=null;s="string"==typeof e.type?e.type:e.type.name||e.type.displayName||"<function>";var a=o("Invalid %s value: %s",s,t);throw"<function>"===s&&(a+="\n"+r.message),c(e,a)}return r},f.prototype._checkValue=function(e,t){var r=e.choices;if(r){if(("string"==typeof r||Array.isArray(r))&&-1!==r.indexOf(t))return;if("object"==typeof r&&!Array.isArray(r)&&r[t])return;r="string"==typeof r?r.split("").join(", "):Array.isArray(r)?r.join(", "):Object.keys(r).join(", ");var n=o("Invalid choice: %s (choose from [%s])",t,r);throw c(e,n)}},f.prototype.formatUsage=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.formatHelp()},f.prototype.formatHelp=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.addText(this.description),this._actionGroups.forEach((function(t){e.startSection(t.title),e.addText(t.description),e.addArguments(t._groupActions),e.endSection()})),e.addText(this.epilog),e.formatHelp()},f.prototype._getFormatter=function(){return new(0,this.formatterClass)({prog:this.prog})},f.prototype.printUsage=function(){this._printMessage(this.formatUsage())},f.prototype.printHelp=function(){this._printMessage(this.formatHelp())},f.prototype._printMessage=function(e,t){t||(t=process.stdout),e&&t.write(""+e)},f.prototype.exit=function(e,t){t&&(0===e?this._printMessage(t):this._printMessage(t,process.stderr)),process.exit(e)},f.prototype.error=function(e){var t;if(e instanceof Error){if(!0===this.debug)throw e;t=e.message}else t=e;var r=o("%s: error: %s",this.prog,t)+a.EOL;if(!0===this.debug)throw new Error(r);return this.printUsage(process.stderr),this.exit(2,r)},e.exports=f},function(e,t,r){"use strict";var n=r(0),o=r(3),i=r(2),s=e.exports=function(e){null!==(e=e||{}).defaultValue?e.defaultValue=e.defaultValue:e.defaultValue=i.SUPPRESS,e.dest=null!==e.dest?e.dest:i.SUPPRESS,e.nargs=0,o.call(this,e)};n.inherits(s,o),s.prototype.call=function(e){e.printHelp(),e.exit()}},function(e,t,r){"use strict";var n=r(0),o=r(3),i=r(2),s=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for append actions must be > 0; if arg strings are not supplying the value to append, the append const action may be more appropriate");if(this.constant&&this.nargs!==i.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");o.call(this,e)};n.inherits(s,o),s.prototype.call=function(e,t,r){var n=(t[this.dest]||[]).slice();n.push(r),t.set(this.dest,n)}},function(e,t,r){"use strict";var n=r(0),o=r(3),i=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for appendAction");o.call(this,e)};n.inherits(i,o),i.prototype.call=function(e,t){var r=[].concat(t[this.dest]||[]);r.push(this.constant),t.set(this.dest,r)}},function(e,t,r){"use strict";var n=r(0),o=r(3),i=e.exports=function(e){(e=e||{}).nargs=0,o.call(this,e)};n.inherits(i,o),i.prototype.call=function(e,t){t.set(this.dest,(t[this.dest]||0)+1)}},function(e,t,r){"use strict";var n=r(0),o=r(3),i=r(2),s=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for store actions must be > 0; if you have nothing to store, actions such as store true or store const may be more appropriate");if(void 0!==this.constant&&this.nargs!==i.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");o.call(this,e)};n.inherits(s,o),s.prototype.call=function(e,t,r){t.set(this.dest,r)}},function(e,t,r){"use strict";var n=r(0),o=r(10),i=e.exports=function(e){(e=e||{}).constant=!0,e.defaultValue=null!==e.defaultValue&&e.defaultValue,o.call(this,e)};n.inherits(i,o)},function(e,t,r){"use strict";var n=r(0),o=r(10),i=e.exports=function(e){(e=e||{}).constant=!1,e.defaultValue=null===e.defaultValue||e.defaultValue,o.call(this,e)};n.inherits(i,o)},function(e,t,r){"use strict";var n=r(0),o=r(3),i=r(2),s=e.exports=function(e){(e=e||{}).defaultValue=e.defaultValue?e.defaultValue:i.SUPPRESS,e.dest=e.dest||i.SUPPRESS,e.nargs=0,this.version=e.version,o.call(this,e)};n.inherits(s,o),s.prototype.call=function(e){var t=this.version||e.version,r=e._getFormatter();r.addText(t),e.exit(0,r.formatHelp())}},function(e,t,r){"use strict";var n=r(0),o=r(0).format,i=r(3),s=r(2),a=r(11);function u(e,t){var r={optionStrings:[],dest:e,help:t};i.call(this,r)}function l(e){(e=e||{}).dest=e.dest||s.SUPPRESS,e.nargs=s.PARSER,this.debug=!0===e.debug,this._progPrefix=e.prog,this._parserClass=e.parserClass,this._nameParserMap={},this._choicesActions=[],e.choices=this._nameParserMap,i.call(this,e)}n.inherits(u,i),n.inherits(l,i),l.prototype.addParser=function(e,t){var r,n=this;(t=t||{}).debug=!0===this.debug,t.prog||(t.prog=this._progPrefix+" "+e);var o=t.aliases||[];if(t.help||"string"==typeof t.help){var i=t.help;delete t.help;var s=new u(e,i);this._choicesActions.push(s)}return r=new this._parserClass(t),this._nameParserMap[e]=r,o.forEach((function(e){n._nameParserMap[e]=r})),r},l.prototype._getSubactions=function(){return this._choicesActions},l.prototype.call=function(e,t,r){var n=r[0],i=r.slice(1);if(this.dest!==s.SUPPRESS&&(t[this.dest]=n),!this._nameParserMap[n])throw a(o('Unknown parser "%s" (choices: [%s]).',n,Object.keys(this._nameParserMap).join(", ")));this._nameParserMap[n].parseArgs(i,t)},e.exports=l},function(e,t,r){"use strict";var n=r(0),o=r(21),i=e.exports=function(e,t){var r;r=(t=t||{}).required||!1,o.call(this,e),this.required=r};n.inherits(i,o),i.prototype._addAction=function(e){if(e.required)throw"mutually exclusive arguments must be optional",new Error("mutually exclusive arguments must be optional");return e=this._container._addAction(e),this._groupActions.push(e),e},i.prototype._removeAction=function(e){this._container._removeAction(e),this._groupActions.remove(e)}},function(e,t,r){"use strict";r.r(t);r(26);var n=r(8),o=r.n(n),i=r(1),s=r(14),a=r(9),u=r(23),l=r(4);const c=i.Readable,p=Symbol("buffer"),h=Symbol("type");class f{constructor(){this[h]="";const e=arguments[0],t=arguments[1],r=[];let n=0;if(e){const t=e,o=Number(t.length);for(let e=0;e<o;e++){const o=t[e];let i;i=o instanceof Buffer?o:ArrayBuffer.isView(o)?Buffer.from(o.buffer,o.byteOffset,o.byteLength):o instanceof ArrayBuffer?Buffer.from(o):o instanceof f?o[p]:Buffer.from("string"==typeof o?o:String(o)),n+=i.length,r.push(i)}}this[p]=Buffer.concat(r);let o=t&&void 0!==t.type&&String(t.type).toLowerCase();o&&!/[^\u0020-\u007E]/.test(o)&&(this[h]=o)}get size(){return this[p].length}get type(){return this[h]}text(){return Promise.resolve(this[p].toString())}arrayBuffer(){const e=this[p],t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(t)}stream(){const e=new c;return e._read=function(){},e.push(this[p]),e.push(null),e}toString(){return"[object Blob]"}slice(){const e=this.size,t=arguments[0],r=arguments[1];let n,o;n=void 0===t?0:t<0?Math.max(e+t,0):Math.min(t,e),o=void 0===r?e:r<0?Math.max(e+r,0):Math.min(r,e);const i=Math.max(o-n,0),s=this[p].slice(n,n+i),a=new f([],{type:arguments[2]});return a[p]=s,a}}function g(e,t,r){Error.call(this,e),this.message=e,this.type=t,r&&(this.code=this.errno=r.code),Error.captureStackTrace(this,this.constructor)}let d;Object.defineProperties(f.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(f.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),g.prototype=Object.create(Error.prototype),g.prototype.constructor=g,g.prototype.name="FetchError";try{d=require("encoding").convert}catch(e){}const m=Symbol("Body internals"),y=i.PassThrough;function _(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.size;let o=void 0===n?0:n;var s=r.timeout;let a=void 0===s?0:s;null==e?e=null:b(e)?e=Buffer.from(e.toString()):w(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof i||(e=Buffer.from(String(e)))),this[m]={body:e,disturbed:!1,error:null},this.size=o,this.timeout=a,e instanceof i&&e.on("error",(function(e){const r="AbortError"===e.name?e:new g(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[m].error=r}))}function v(){var e=this;if(this[m].disturbed)return _.Promise.reject(new TypeError("body used already for: "+this.url));if(this[m].disturbed=!0,this[m].error)return _.Promise.reject(this[m].error);let t=this.body;if(null===t)return _.Promise.resolve(Buffer.alloc(0));if(w(t)&&(t=t.stream()),Buffer.isBuffer(t))return _.Promise.resolve(t);if(!(t instanceof i))return _.Promise.resolve(Buffer.alloc(0));let r=[],n=0,o=!1;return new _.Promise((function(i,s){let a;e.timeout&&(a=setTimeout((function(){o=!0,s(new g(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))}),e.timeout)),t.on("error",(function(t){"AbortError"===t.name?(o=!0,s(t)):s(new g(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))})),t.on("data",(function(t){if(!o&&null!==t){if(e.size&&n+t.length>e.size)return o=!0,void s(new g(`content size at ${e.url} over limit: ${e.size}`,"max-size"));n+=t.length,r.push(t)}})),t.on("end",(function(){if(!o){clearTimeout(a);try{i(Buffer.concat(r,n))}catch(t){s(new g(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}}))}))}function b(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function w(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function S(e){let t,r,n=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return n instanceof i&&"function"!=typeof n.getBoundary&&(t=new y,r=new y,n.pipe(t),n.pipe(r),e[m].body=t,n=r),n}function E(e){return null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":b(e)?"application/x-www-form-urlencoded;charset=UTF-8":w(e)?e.type||null:Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||ArrayBuffer.isView(e)?null:"function"==typeof e.getBoundary?"multipart/form-data;boundary="+e.getBoundary():e instanceof i?null:"text/plain;charset=UTF-8"}function A(e){const t=e.body;return null===t?0:w(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}_.prototype={get body(){return this[m].body},get bodyUsed(){return this[m].disturbed},arrayBuffer(){return v.call(this).then((function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}))},blob(){let e=this.headers&&this.headers.get("content-type")||"";return v.call(this).then((function(t){return Object.assign(new f([],{type:e.toLowerCase()}),{[p]:t})}))},json(){var e=this;return v.call(this).then((function(t){try{return JSON.parse(t.toString())}catch(t){return _.Promise.reject(new g(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}}))},text(){return v.call(this).then((function(e){return e.toString()}))},buffer(){return v.call(this)},textConverted(){var e=this;return v.call(this).then((function(t){return function(e,t){if("function"!=typeof d)throw new Error("The package `encoding` must be installed to use the textConverted() function");const r=t.get("content-type");let n,o,i="utf-8";r&&(n=/charset=([^;]*)/i.exec(r));o=e.slice(0,1024).toString(),!n&&o&&(n=/<meta.+?charset=(['"])(.+?)\1/i.exec(o));!n&&o&&(n=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(o),n&&(n=/charset=(.*)/i.exec(n.pop())));!n&&o&&(n=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(o));n&&(i=n.pop(),"gb2312"!==i&&"gbk"!==i||(i="gb18030"));return d(e,"UTF-8",i).toString()}(t,e.headers)}))}},Object.defineProperties(_.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),_.mixIn=function(e){for(const t of Object.getOwnPropertyNames(_.prototype))if(!(t in e)){const r=Object.getOwnPropertyDescriptor(_.prototype,t);Object.defineProperty(e,t,r)}},_.Promise=global.Promise;const O=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,x=/[^\t\x20-\x7e\x80-\xff]/;function C(e){if(e=""+e,O.test(e)||""===e)throw new TypeError(e+" is not a legal HTTP header name")}function P(e){if(e=""+e,x.test(e))throw new TypeError(e+" is not a legal HTTP header value")}function R(e,t){t=t.toLowerCase();for(const r in e)if(r.toLowerCase()===t)return r}const L=Symbol("map");class M{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[L]=Object.create(null),e instanceof M){const t=e.raw(),r=Object.keys(t);for(const e of r)for(const r of t[e])this.append(e,r)}else if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw new TypeError("Header pairs must be iterable");const r=[];for(const t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw new TypeError("Each header pair must be iterable");r.push(Array.from(t))}for(const e of r){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const t of Object.keys(e)){const r=e[t];this.append(t,r)}}}}get(e){C(e=""+e);const t=R(this[L],e);return void 0===t?null:this[L][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,r=j(this),n=0;for(;n<r.length;){var o=r[n];const i=o[0],s=o[1];e.call(t,s,i,this),r=j(this),n++}}set(e,t){t=""+t,C(e=""+e),P(t);const r=R(this[L],e);this[L][void 0!==r?r:e]=[t]}append(e,t){t=""+t,C(e=""+e),P(t);const r=R(this[L],e);void 0!==r?this[L][r].push(t):this[L][e]=[t]}has(e){return C(e=""+e),void 0!==R(this[L],e)}delete(e){C(e=""+e);const t=R(this[L],e);void 0!==t&&delete this[L][t]}raw(){return this[L]}keys(){return N(this,"key")}values(){return N(this,"value")}[Symbol.iterator](){return N(this,"key+value")}}function j(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";const r=Object.keys(e[L]).sort();return r.map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[L][t].join(", ")}:function(t){return[t.toLowerCase(),e[L][t].join(", ")]})}M.prototype.entries=M.prototype[Symbol.iterator],Object.defineProperty(M.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(M.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const T=Symbol("internal");function N(e,t){const r=Object.create(U);return r[T]={target:e,kind:t,index:0},r}const U=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==U)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[T];const t=e.target,r=e.kind,n=e.index,o=j(t,r);return n>=o.length?{value:void 0,done:!0}:(this[T].index=n+1,{value:o[n],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function k(e){const t=Object.assign({__proto__:null},e[L]),r=R(e[L],"Host");return void 0!==r&&(t[r]=t[r][0]),t}Object.defineProperty(U,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const I=Symbol("Response internals"),B=s.STATUS_CODES;class F{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_.call(this,e,t);const r=t.status||200,n=new M(t.headers);if(null!=e&&!n.has("Content-Type")){const t=E(e);t&&n.append("Content-Type",t)}this[I]={url:t.url,status:r,statusText:t.statusText||B[r],headers:n,counter:t.counter}}get url(){return this[I].url||""}get status(){return this[I].status}get ok(){return this[I].status>=200&&this[I].status<300}get redirected(){return this[I].counter>0}get statusText(){return this[I].statusText}get headers(){return this[I].headers}clone(){return new F(S(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}}_.mixIn(F.prototype),Object.defineProperties(F.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(F.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});const G=Symbol("Request internals"),H=a.parse,$=a.format,D="destroy"in i.Readable.prototype;function q(e){return"object"==typeof e&&"object"==typeof e[G]}class V{constructor(e){let t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};q(e)?t=H(e.url):(t=e&&e.href?H(e.href):H(""+e),e={});let n=r.method||e.method||"GET";if(n=n.toUpperCase(),(null!=r.body||q(e)&&null!==e.body)&&("GET"===n||"HEAD"===n))throw new TypeError("Request with GET/HEAD method cannot have body");let o=null!=r.body?r.body:q(e)&&null!==e.body?S(e):null;_.call(this,o,{timeout:r.timeout||e.timeout||0,size:r.size||e.size||0});const i=new M(r.headers||e.headers||{});if(null!=o&&!i.has("Content-Type")){const e=E(o);e&&i.append("Content-Type",e)}let s=q(e)?e.signal:null;if("signal"in r&&(s=r.signal),null!=s&&!function(e){const t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!(!t||"AbortSignal"!==t.constructor.name)}(s))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[G]={method:n,redirect:r.redirect||e.redirect||"follow",headers:i,parsedURL:t,signal:s},this.follow=void 0!==r.follow?r.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==r.compress?r.compress:void 0===e.compress||e.compress,this.counter=r.counter||e.counter||0,this.agent=r.agent||e.agent}get method(){return this[G].method}get url(){return $(this[G].parsedURL)}get headers(){return this[G].headers}get redirect(){return this[G].redirect}get signal(){return this[G].signal}clone(){return new V(this)}}function z(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}_.mixIn(V.prototype),Object.defineProperty(V.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(V.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),z.prototype=Object.create(Error.prototype),z.prototype.constructor=z,z.prototype.name="AbortError";const Z=i.PassThrough,J=a.resolve;function W(e,t){if(!W.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return _.Promise=W.Promise,new W.Promise((function(r,n){const o=new V(e,t),a=function(e){const t=e[G].parsedURL,r=new M(e[G].headers);if(r.has("Accept")||r.set("Accept","*/*"),!t.protocol||!t.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof i.Readable&&!D)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let n=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(n="0"),null!=e.body){const t=A(e);"number"==typeof t&&(n=String(t))}n&&r.set("Content-Length",n),r.has("User-Agent")||r.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!r.has("Accept-Encoding")&&r.set("Accept-Encoding","gzip,deflate");let o=e.agent;return"function"==typeof o&&(o=o(t)),r.has("Connection")||o||r.set("Connection","close"),Object.assign({},t,{method:e.method,headers:k(r),agent:o})}(o),c=("https:"===a.protocol?u:s).request,p=o.signal;let h=null;const f=function(){let e=new z("The user aborted a request.");n(e),o.body&&o.body instanceof i.Readable&&o.body.destroy(e),h&&h.body&&h.body.emit("error",e)};if(p&&p.aborted)return void f();const d=function(){f(),_()},m=c(a);let y;function _(){m.abort(),p&&p.removeEventListener("abort",d),clearTimeout(y)}p&&p.addEventListener("abort",d),o.timeout&&m.once("socket",(function(e){y=setTimeout((function(){n(new g("network timeout at: "+o.url,"request-timeout")),_()}),o.timeout)})),m.on("error",(function(e){n(new g(`request to ${o.url} failed, reason: ${e.message}`,"system",e)),_()})),m.on("response",(function(e){clearTimeout(y);const t=function(e){const t=new M;for(const r of Object.keys(e))if(!O.test(r))if(Array.isArray(e[r]))for(const n of e[r])x.test(n)||(void 0===t[L][r]?t[L][r]=[n]:t[L][r].push(n));else x.test(e[r])||(t[L][r]=[e[r]]);return t}(e.headers);if(W.isRedirect(e.statusCode)){const i=t.get("Location"),s=null===i?null:J(o.url,i);switch(o.redirect){case"error":return n(new g("redirect mode is set to error: "+o.url,"no-redirect")),void _();case"manual":if(null!==s)try{t.set("Location",s)}catch(e){n(e)}break;case"follow":if(null===s)break;if(o.counter>=o.follow)return n(new g("maximum redirect reached at: "+o.url,"max-redirect")),void _();const i={headers:new M(o.headers),follow:o.follow,counter:o.counter+1,agent:o.agent,compress:o.compress,method:o.method,body:o.body,signal:o.signal,timeout:o.timeout};return 303!==e.statusCode&&o.body&&null===A(o)?(n(new g("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void _()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==o.method)||(i.method="GET",i.body=void 0,i.headers.delete("content-length")),r(W(new V(s,i))),void _())}}e.once("end",(function(){p&&p.removeEventListener("abort",d)}));let i=e.pipe(new Z);const s={url:o.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:o.size,timeout:o.timeout,counter:o.counter},a=t.get("Content-Encoding");if(!o.compress||"HEAD"===o.method||null===a||204===e.statusCode||304===e.statusCode)return h=new F(i,s),void r(h);const u={flush:l.Z_SYNC_FLUSH,finishFlush:l.Z_SYNC_FLUSH};if("gzip"==a||"x-gzip"==a)return i=i.pipe(l.createGunzip(u)),h=new F(i,s),void r(h);if("deflate"!=a&&"x-deflate"!=a){if("br"==a&&"function"==typeof l.createBrotliDecompress)return i=i.pipe(l.createBrotliDecompress()),h=new F(i,s),void r(h);h=new F(i,s),r(h)}else{e.pipe(new Z).once("data",(function(e){i=8==(15&e[0])?i.pipe(l.createInflate()):i.pipe(l.createInflateRaw()),h=new F(i,s),r(h)}))}})),function(e,t){const r=t.body;null===r?e.end():w(r)?r.stream().pipe(e):Buffer.isBuffer(r)?(e.write(r),e.end()):r.pipe(e)}(m,o)}))}W.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},W.Promise=global.Promise;var X=W;function K(e,{stream:t=process.stdout,end:r="\n",clear:n=!0}={}){n&&t.clearLine(0),t.cursorTo(0),t.write(e+r)}function Y(e,{code:t=1}={}){K(e,{stream:process.stderr,clear:!1}),process.exitCode=t}function Q(e){return new Promise(t=>setTimeout(t,e))}var ee=r(5),te=r.n(ee),re=r(24),ne=r.n(re);function oe(e){return new Promise(t=>{const r=ne.a.createInterface({input:e,terminal:!1}),n=[];r.on("line",e=>n.push(e)),r.on("close",()=>t(n))})}function ie(e){return new Promise((t,r)=>{const n=te.a.createWriteStream(e);n.on("error",r),n.on("ready",()=>t(n))})}function se(e,t){return new Promise(r=>{e.pipe(t),e.on("end",r)})}var ae=r(25),ue=r(15);var le=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};!function(){var e,t;le(this,void 0,void 0,(function*(){const{commandLineUrls:r,outputDirectory:n,sleepMs:i,input:s}=function(){const e=new ae.ArgumentParser({version:ue.version,prog:ue.name});return e.addArgument(["-o","--output-directory"],{defaultValue:".",dest:"outputDirectory",metavar:"DIRECTORY"}),e.addArgument(["-s","--sleep-ms"],{defaultValue:200,dest:"sleepMs",metavar:"MILLISECONDS",type:Number}),e.addArgument(["-i","--input"],{dest:"input",metavar:"FILE"}),e.addArgument("commandLineUrls",{nargs:"*",metavar:"url"}),e.parseArgs()}();let a=r;if("-"===s)a=yield oe(process.stdin);else if(null!==s){let e;try{e=yield function(e,t="utf-8"){return new Promise((r,n)=>{const o=te.a.createReadStream(e,t);o.on("error",n),o.on("ready",()=>r(o))})}(s)}catch(e){return void Y(`${e.code} error opening input file: ${s}`,{code:2})}a=yield oe(e)}else if(0===r.length)return void Y("URL(s) required when not using '--input'",{code:2});if(!Number.isSafeInteger(i)||i<0)Y("Sleep milliseconds value must be a positive integer",{code:2});else{try{yield function(e,t={recursive:!0}){return new Promise((r,n)=>{te.a.mkdir(e,t,e=>{null===e?r():n(e)})})}(n)}catch(e){if("EEXIST"!==e.code)return void Y(`${e.code} error trying to make directory: ${n}`,{code:2})}for(const[r,s]of function*(e,t=0,r=1){let n=t;for(const t of e)yield[n,t],n+=r}(a,1)){let u,l;K("☐ "+s,{end:""});try{u=yield X(s)}catch(e){Y(`☒ ${s} - Network error fetching page URL`);continue}if(!u.ok){Y(`☒ ${s} - Fetching page URL returned ${u.status}`);continue}try{l=yield u.text()}catch(e){Y(`☒ ${s} - Error decoding response text`);continue}const c=null===(e=l.match(/class="filename">(.+?)</))||void 0===e?void 0:e[1];if(void 0===c){Y(`☒ ${s} - Could not find filename in HTML`);continue}const p=null===(t=l.match(/"Download file"\s+href="(.+?)"/))||void 0===t?void 0:t[1];if(void 0===p){Y(`☒ ${s} - Could not find download URL in HTML`);continue}const h=o.a.join(n,c);K(`☐ ${s} -> "${h}"`,{end:"",clear:!1});try{u=yield X(p)}catch(e){Y(`☒ ${s} -> "${h}" - Network error fetching download URL`);continue}if(!u.ok){Y(`☒ ${s} -> "${h}" - Fetching download URL returned ${u.status}`);continue}let f;try{f=yield ie(h)}catch(e){Y(`☒ ${s} -> "${h}" - ${e.code} error opening output file`);continue}try{yield se(u.body,f)}catch(e){Y(`☒ ${s} -> "${h}" - Error writing response data`);continue}K(`🗹 ${s} -> "${h}"`),r!==a.length&&(yield Q(i))}}}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,